nextflow_pipeline {

    name "Test pipeline: NFCORE_CREATETAXDB"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_createtaxdb"
    tag "test_alternatives"

    test("test_alternatives_profile") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                        "kaiju/database.fmi - minimum file size: ${file("$outputDir/kaiju/database.fmi").length() >= 3519604}",
                        "kaiju/database.bwt - minimum file size: ${file("$outputDir/kaiju/database.bwt").length() >= 2612295}",
                        "kaiju/database.sa - minimum file size: ${file("$outputDir/kaiju/database.sa").length() >= 450917}",
                        "krakenuniq/database/database.idx - minimum file size: ${file("$outputDir/krakenuniq/database/database.idx").length() >= 536870928}",
                        file("$outputDir/krakenuniq/database/database.kdb"),
                        file("$outputDir/krakenuniq/database/taxDB"),
                        file("$outputDir/krakenuniq/database/database0.kdb"),
                        "krakenuniq/database/database-build.log - contains string: ${path("$outputDir/krakenuniq/database/database-build.log").readLines().last().contains('eval db_sort')}",
                        file("$outputDir/krakenuniq/database/database.idx"),
                        file("$outputDir/krakenuniq/database/database.jdb"),
                        file("$outputDir/krakenuniq/database/database.kdb"),
                        file("$outputDir/krakenuniq/database/database.kdb.counts"),
                        "krakenuniq/database/database.kraken.tsv - contains string: ${path("$outputDir/krakenuniq/database/database.kraken.tsv").readLines().any{ it.contains('NZ_LS483480.1')}}",
                        "krakenuniq/database/database.report.tsv - contains string: ${path("$outputDir/krakenuniq/database/database.report.tsv").readLines().last().contains('unclassified')}",
                        file("$outputDir/krakenuniq/database/library/chrMT.fna"),
                        file("$outputDir/krakenuniq/database/library/GCA_011545545.1_ASM1154554v1_genomic.fna"),
                        file("$outputDir/krakenuniq/database/library/GCF_000292685.1_ASM29268v1_genomic.fna"),
                        file("$outputDir/krakenuniq/database/library/GCF_016889925.1_ASM1688992v1_genomic.fna"),
                        file("$outputDir/krakenuniq/database/library/GCF_900478275.1_34211_D02_genomic.fna"),
                        "krakenuniq/database/library-files.txt - contains string: ${path("$outputDir/krakenuniq/database/library-files.txt").readLines().contains('library/GCF_900478275.1_34211_D02_genomic.fna')}",
                        file("$outputDir/krakenuniq/database/nucl2tax.map"),
                        file("$outputDir/krakenuniq/database/seqid2taxid.map"),
                        file("$outputDir/krakenuniq/database/taxDB"),
                        file("$outputDir/krakenuniq/database/taxonomy/names.dmp"),
                        file("$outputDir/krakenuniq/database/taxonomy/nodes.dmp"),
                        "malt/malt-build.log - contains string: ${path("$outputDir/malt/malt-build.log").readLines().any{ it.contains('--mapDB')}}",
                        "malt/malt-build.log - contains string: ${path("$outputDir/malt/malt-build.log").readLines().last().contains('Peak memory')}",
                        path("$outputDir/malt/malt_index/index0.idx"),
                        "malt/malt_index/ref.db - minimum file size: ${file("$outputDir/malt/malt_index/ref.db").length() >= 3241218}",
                        "malt/malt_index/ref.idx- minimum file size: ${file("$outputDir/malt/malt_index/ref.idx").length() >= 48}",
                        path("$outputDir/malt/malt_index/ref.inf"),
                        path("$outputDir/malt/malt_index/taxonomy.idx"),
                        path("$outputDir/malt/malt_index/taxonomy.map"),
                        path("$outputDir/malt/malt_index/taxonomy.tre")
                    ).match()
                },
                { assert new File("$outputDir/pipeline_info/nf_core_createtaxdb_software_mqc_versions.yml").exists() },
                { assert new File("$outputDir/multiqc/multiqc_report.html").exists() },
                { assert path("$outputDir/malt/malt_index/table0.db").exists() },
                { assert path("$outputDir/malt/malt_index/table0.idx").exists() },
            )
        }
    }
}
